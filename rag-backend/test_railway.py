#!/usr/bin/env python3
"""
Script de prueba para verificar que todas las dependencias y configuraciones
funcionan correctamente en Railway
"""

import os
import sys
from dotenv import load_dotenv

def test_environment():
    """Probar que todas las variables de entorno est√°n configuradas"""
    print("üîç Verificando variables de entorno...")
    
    required_vars = [
        "AZURE_OPENAI_API_KEY",
        "AZURE_OPENAI_ENDPOINT", 
        "OPENAI_API_VERSION",
        "AZURE_SEARCH_SERVICE_ENDPOINT",
        "AZURE_SEARCH_INDEX",
        "AZURE_SEARCH_ADMIN_KEY"
    ]
    
    missing = []
    for var in required_vars:
        if not os.getenv(var):
            missing.append(var)
            print(f"‚ùå {var}: NOT SET")
        else:
            print(f"‚úÖ {var}: SET")
    
    if missing:
        print(f"\nüö® Variables faltantes: {', '.join(missing)}")
        return False
    
    print("\n‚úÖ Todas las variables de entorno est√°n configuradas")
    return True

def test_imports():
    """Probar que todas las dependencias se pueden importar"""
    print("\nüîç Verificando imports...")
    
    try:
        from fastapi import FastAPI
        print("‚úÖ FastAPI")
        
        from openai import AzureOpenAI
        print("‚úÖ Azure OpenAI")
        
        from azure.search.documents import SearchClient
        print("‚úÖ Azure Search")
        
        from azure.core.credentials import AzureKeyCredential
        print("‚úÖ Azure Credentials")
        
        import dotenv
        print("‚úÖ Python dotenv")
        
        print("\n‚úÖ Todas las dependencias se importaron correctamente")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error importando dependencias: {e}")
        return False

def test_azure_connections():
    """Probar conexiones b√°sicas a Azure"""
    print("\nüîç Verificando conexiones a Azure...")
    
    try:
        from openai import AzureOpenAI
        
        client = AzureOpenAI(
            api_key=os.getenv("AZURE_OPENAI_API_KEY"),
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
            api_version=os.getenv("OPENAI_API_VERSION")
        )
        
        print("‚úÖ Cliente Azure OpenAI inicializado")
        
        from azure.search.documents import SearchClient
        from azure.core.credentials import AzureKeyCredential
        
        search_client = SearchClient(
            endpoint=os.getenv("AZURE_SEARCH_SERVICE_ENDPOINT"),
            index_name=os.getenv("AZURE_SEARCH_INDEX"),
            credential=AzureKeyCredential(os.getenv("AZURE_SEARCH_ADMIN_KEY"))
        )
        
        print("‚úÖ Cliente Azure Search inicializado")
        print("\n‚úÖ Conexiones a Azure configuradas correctamente")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error conectando a Azure: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de Railway...\n")
    
    # Cargar variables de entorno
    load_dotenv()
    
    # Ejecutar pruebas
    tests = [
        test_environment,
        test_imports,
        test_azure_connections
    ]
    
    all_passed = True
    for test in tests:
        if not test():
            all_passed = False
    
    print("\n" + "="*50)
    if all_passed:
        print("üéâ ¬°Todas las pruebas pasaron! La aplicaci√≥n deber√≠a funcionar en Railway.")
        sys.exit(0)
    else:
        print("‚ùå Algunas pruebas fallaron. Revisa la configuraci√≥n.")
        sys.exit(1)